===================================================================
D0856r0 : Restrict Access Property for span and mdspan
===================================================================

:Project: ISO JTC1/SC22/WG21: Programming Language C++
:Number: D0856r0
:Date: 2017-11-09
:Reply-to: hcedwar@sandia.gov
:Author: H\. Carter Edwards
:Contact: hcedwar@sandia.gov
:Author: Christian Trott
:Contact: crtrott@sandia.gov
:Audience: Library Evolution Working Group (LEWG)
:URL: https://github.com/kokkos/array_ref/blob/master/proposals/P0856.rst


.. sectnum::


******************************************************************
Revision History
******************************************************************

----------------------------------------------------------------------------
D0856r0
----------------------------------------------------------------------------

  2017-11-08 Albuquerque LEWG feedback for P0009

  - Generate paper for *restrict* access property for ``span`` and ``mdspan``


******************************************************************
Motivation
******************************************************************

The restrict (non-aliasing) property is a widely useful mechanism
to enable array access optimization.  This functionality is part
of the C standard, several C++ compilers' extensions, and native
to FORTRAN array semantics.

We propose to add the ``restrict_access`` property to the
set of admissible access properties of ``span`` and ``mdspan``.

This paper does not propose a strategy for subsequent extensibility.
We identify open questions that must be addressed in the design
of such a strategy.

******************************************************************
Proposal
******************************************************************

.. code-block:: c++

  namespace std {
  namespace experimental {
  inline namespace fundamentals_v3 {

    struct restrict_access ;

    template< class , class >
    struct has_access_property ;

    template< class S , class P >
    inline constexpr bool has_access_property_v = has_access_property<S,P>::value ;

  }}}

..

  Let *S* be an object of either a ``span`` or ``mdspan`` type.

  The ``restrict_access`` property may appear at most once in the
  ``span`` or ``mdspan`` ``AccessProperties...`` parameter pack.
  When the ``AccessProperties...`` parameter pack of *S*
  contains ``restrict_access`` then

  - during each execution of a block in which *S* is declared
    (typically each execution of a function body
    in which *S* is a function parameter),
    if some object in the codomain of *S* is accessed and modified,
    by any means, then all accesses to that object (both reads and writes)
    during the execution of that block,
    including other concurrently executing code,
    must occur through *S*, otherwise the behavior is undefined; 
  - if the element type of *S* is ``const`` qualified
    and thus the objects in the codomain of *S* are never modified,
    they may be aliased and accessed through different
    ``const``- and restrict-qualified instances of ``span`` or ``mdspan``.

  **Notes**

  The intended use of the ``restrict_access`` property
  is to promote optimization, and deleting all instances
  of the property from all instantiations of ``span`` and ``mdspan``
  composing a conforming program does not change its meaning
  (i.e., observable behavior).

  The compiler is free to ignore any or all aliasing implications
  of uses of ``restrict_access``.

  To avoid undefined behavior, the programmer must ensure
  that the aliasing assertions made by the restrict-qualified
  ``span`` and ``mdspan`` objects are not violated.

``has_access_property<S,P>::value``

  Evaluates to true if ``S`` is instantiation of  ``span`` or ``mdspan``,
  ``P`` is ``restrict_access``, and 
  the ``AccessProperties...`` parameter pack of ``S`` contains
  ``restrict_access``.

******************************************************************
Open Questions for Extending Access Properties
******************************************************************

  - Only through the standard?

  - Also through hardware/compiler-specific extensions?

  - Also by library providers?

  - Rules for extending the set of access properties?

  - Rules for resolving combinations of potentially conflicting properties?


