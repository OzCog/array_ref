========================================================================
D0332r2 : Relaxed Incomplete Multidimensional Array Type Declaration
========================================================================

:Project: ISO JTC1/SC22/WG21: Programming Language C++
:Number: D0332r2
:Date: 2017-10-091
:Reply-to: hcedwar@sandia.gov, balelbach@lbl.gov
:Author: H\. Carter Edwards
:Contact: hcedwar@sandia.gov
:Author: Christian Trott
:Contact: crtrott@sandia.gov
:Author: David Hollman
:Contact: dshollm@sandia.gov
:Author: Mauro Bianco
:Contact: mbianco@cscs.ch
:Author: Athanasios Iliopoulos
:Contact: athanasios.iliopoulos@nrl.navy.mil
:Author: John Michopoulos
:Contact: john.michopoulos@nrl.navy.mil
:Audience: Evolution Working Group (EWG)
:URL: https://github.com/kokkos/array_ref/blob/master/proposals/P0332.rst


******************************************************************
Revision History
******************************************************************

----------------------------------------------------------------------
N4356 : Original proposal
----------------------------------------------------------------------

----------------------------------------------------------------------
P0332r0
----------------------------------------------------------------------

  - Relaxed array declaration extracted from P0009

----------------------------------------------------------------------
P0332r1
----------------------------------------------------------------------

  - Align with updates to P0009
  - Add examples of precedents
  - Reviews at 2017-Albuquerque

    - LEWG: moves P0009 to LWG
    - EWG: P0332r1 fails to address concerns raised with N4356

----------------------------------------------------------------------
P0332r2
----------------------------------------------------------------------

  - Fully address scope of EWG feedback on N4356
  - Introduce clarification for loosely defined *incomplete type*


******************************************************************
Motivation
******************************************************************

----------------------------------------------------------------------
Array type for ``mdspan``
----------------------------------------------------------------------

The dimensions of multidimensional array reference ``mdspan``
(P0331 and P0009) are declared a syntactically verbose property argument.
We propose a trivial, non-breaking relaxation of the
array type declaration in **[decl.array]** to allow a concise
and intuitive syntax for multidimensional declarations.

.. code-block:: c++

  template< typename DataType , typename Properties... >
  struct mdspan ;

  // Three dimensional tensor type declaration with
  // verbose syntax and left-to-right increasing stride.

  using tensor = std::mdspan<double,std::extents<std::dynamic_extent,std::dynamic_extent,std::dynamic_extent>,LayoutLeft> ;

  // Three dimensional tensor type declaration with concise syntax
  // and left-to-right increasing stride.

  using tensor = mdspan<double[][][],LayoutLeft> ;

..

The motivating ``mdspan`` proposal (P0009)
moved by LEWG to LWG in 2017-Albuquerque.

----------------------------------------------------------------------
Why Not
----------------------------------------------------------------------

``mdspan<double,std::dynamic_extent,std::dynamic_extent,std::dynamic_extent,LayoutLeft>``

  - Does not allow LayoutLeft or other properties to be types.
  - Still requires ``dynamic_extent`` magic number.

------------------------------------------------------------------------------
Clarifying difference between an array type and array object declarations
------------------------------------------------------------------------------

The current specification conflates rules for
array type and and array object declarations.  
This proposal disambiguates the relaxed array type declaration rules
and the constrained array object declaration rules.

******************************************************************************
Proposal
******************************************************************************

This proposal has two themes:
(1) clarification of incomplete and array types
versus array declarations and
(2) relaxation of extent expressions for incomplete array types,
but not array declarations.

------------------------------------------------------------------------------
Clarification of incomplete types
------------------------------------------------------------------------------

**[types.basic] 6.9 Types, p5-p6**

An *incomplete class type* is a class that has been declared but not defined.
A class type (such as "``class X``") might be incomplete
at one point in a translation unit and completed later in the
translation unit; the type "``class X``" is the same type at both points.

When the element type ``T`` of an "array of ``N T``"
(such as "``T[N]``")
is an incomplete class type the array type is incomplete;
if the class type is later completed in the translation unit
the array type becomes complete and the array type
at those two points is the same type.

When the declared type of an array object is of unknown bound
(such as "``T obj[]``") at one point in a translation unit and 
is later completed in the translation unit (such as "``T obj[N]``")
the array types at those two points (respectively "``T[]``" and "``T[N]``")
are different types.

The type of a pointer to array of unknown bound,
or of a type defined to be an array of unknown bound,
cannot be completed.

An *incompletely-defined object type* is

  - an incomplete class type,
  - an enumeration type in certain contexts (10.2),
  - an array (11.3.4) of an incomplete class type, or
  - an array of an unknown bound (11.3.4). 

An *incomplete type that cannot be completed* is

  - *cv* ``void``,
  - an array of unknown bound,
  - a pointer to an array of unknown bound, or
  - an array with element type that is an array of unknown bound.

An *incomplete type* is

  - an incompletely-defined object type or
  - an incomplete type that cannot be completed.

Objects shall not be defined to have an incomplete type.


.. code-block:: c++

  typedef int UNKA[];     // UNKA is an incomplete type
  typedef UNKA UNKAA[N];  // UNKAA is an incomplete type that cannot be completed
  UNKA  arrn[N];          // ill-formed, UNKA cannot be completed
  UNKA* arrp;             // ill-formed, UNKA* cannot be completed

..


**[types.basic] 6.9 Types, p8**

An *object type* is a (possibly cv-qualified) type that is not

  - a function type,
  - a reference type, or
  - incomplete type that cannot be completed.


------------------------------------------------------------------------------
Clarification and relaxation of array type
------------------------------------------------------------------------------

**[dcl.array] 11.3.4 Arrays, p1**

Clarify the difference between an *array type declaration*
and *array declaration*.

  An *array type declaration* has the form

    ``T[`` *constant-expression*\_\ *opt* ``]``

  ``T`` is the array *element type*;
  this type shall not be
  a reference type,
  a function type,
  an abstract class, or
  *cv* void.
  If the *constant-expression* (8.20) is present,
  it is a converted constant expression of type ``std::size_t``.
  If the value of the constant expression is ``N``, the array type
  is "array of ``N T``".
  The constant expression specifies the *bound* of (number of elements in)
  objects of the array type.
  If the constant expression is omitted the type is an
  "*array of unknown bound of* ``T``"
  and is an incomplete type that cannot be completed.
  Any type of the form "*cv-qualifier-seq* array of ``N T``"
  is adjusted to "array of ``N`` *cv-qualifier-seq* ``T``",
  similarly for "array of unknown bound of ``T``".
  If the element type is an incomplete type that cannot be completed
  then the array type is an incomplete type that cannot be completed.

  An *array declaration* has the form

    ``T D[`` *constant-expression*\_\ *opt* ``]`` *attribute-specifier-seq*\_\ *opt*

  the type of the identifier ``D`` is an array type.
  ``T`` is the array *element type*;
  this type shall not be
  a reference type,
  a function type,
  an abstract class, or
  an incomplete type that cannot be completed.
  Except as noted below, the constant expression shall not be omitted.
  The array type of ``D`` is ``T[``\ *constant-expression*\_\ *opt*\ ``]``.
  The optional *attribute-specifier-seq* appertains to the array.

  An object of an array type contains a contiguous non-empty set of
  ``N`` subobjects of type ``T`` numbered ``0`` to ``N-1``.

 

**[dcl.array] 11.3.4 Arrays, p3**

The current array type declarator constraints are defined as follows.

  When several “array of” specifications are adjacent,
  a multidimensional array type is created;
  only the first of the constant expressions
  that specify the bounds of the arrays may be omitted.
  In addition to declarations in which an
  incomplete object type is allowed,
  an array bound may be omitted in some cases
  in the declaration of a function parameter (11.3.5).
  An array bound may also be omitted when the declarator
  is followed by an initializer (11.6)
  or when a declarator for a static data member
  is followed by a brace-or-equal-initializer (12.2).
  In both cases the bound is calculated from the
  number of initial elements (say, N) supplied (11.6.1),
  and the type of the identifier of D is “array of N T”.
  Furthermore, if there is a preceding declaration
  of the entity in the same scope in which the bound was specified,
  an omitted array bound is taken to be the same as in that
  earlier declaration, and similarly for the definition of
  a static data member of a class.

The following relaxed constraint is proposed.

  When several “array of” specifications are adjacent,
  a multidimensional array type is created.
  In declarations in which an *incomplete type*
  is allowed any of the constant expressions that
  specify the bounds of the arrays may be omitted.
  The first of the constant expressions
  that specify the bounds of the arrays may be omitted

    - in some cases in the declaration of a function parameter (11.3.5),
    - when the declarator is followed by an initializer (11.6),
    - when a declarator for a static data member
      is followed by a brace-or-equal-initializer (12.2), or
    - if there is a preceding declaration
      of the entity in the same scope in which the bound was specified.

  In the initializer cases the bound is calculated from the
  number of initial elements (say, N) supplied (11.6.1),
  and the type of the identifier of D is “array of N T”.
  In the preceding declaration case
  an omitted array bound is taken to be the same as in that
  earlier declaration, and similarly for the definition of
  a static data member of a class.

------------------------------------------------------------------------------
type_traits interaction
------------------------------------------------------------------------------

.. code-block:: c++

  using S = double[10][20][] ;
  rank_v<S> == 3
  extent_v<S,0> == 10
  extent_v<S,1> == 20
  extent_v<S,2> == 0

  remove_extent_t<S> // is an incomplete type
  is_same_v< remove_extent_t<S> , double[20][] >

  remove_extent_t< remove_extent_t<S> > // is an incomplete type
  is_same_v< remove_extent_t< remove_extent_t<S> > , double[] >

  decay_t<S> // is an incomplete type
  is_same_v< decay_t<S> , double(*)[20][] >

..
 

******************************************************************************
Precedence and Feasibility
******************************************************************************

An incomplete array type ``T[]`` to concisely indicate
an array of runtime length is used by
``std::unique_ptr<T[]>`` (23.11.1.3),
``std::shared_ptr<T>`` where ``T`` is ``U[]`` (23.11.2.2),
and P0674 ``make_shared<T[][N1][N2]>``.


This minor language specification change has been implemented with
a trivial (one line) patch to Clang and was permissible in gcc prior to
version 5.


******************************************************************************
Holistic View
******************************************************************************

------------------------------------------------------------------------------
2015-Lenexa EWG discussion on N4356
------------------------------------------------------------------------------

*Stepping back for a second, I think this is a small change
but there are a whole bunch of ways of constructing types and
we disallow many because they would give uninhabited types.
But then look at std::result_of, after this change you can use
std::result_of on a whole bunch of types,
but not on a function type (ironically).
I think there may be some sense in this,
I'd like to see some more holistic view of this,
I don't want to see pointers or references to these,
or functions declared with these things as arguments.*

------------------------------------------------------------------------------
Analysis with respect to N4700 working draft
------------------------------------------------------------------------------

Let ``S`` be an incomplete multdimensional array type
greater than rank 1 from which an extent other than the
leading extent is ommitted.

**[basic.link] 6.5 Program and linkage, p10**

  *After all adjustments of types
  (during which typedefs (10.1.3) are replaced by their definitions),
  the types specified by all declarations referring to a given variable
  or function shall be identical, except that declarations for an
  array object can specify array types that differ by the
  presence or absence of a major array bound (11.3.4).
  A violation of this rule on type identity does not require a diagnostic.*

Array declarations restricted to absence of only the leading array bound.


**[types.basic] 6.9 Types, p5**

  **incompletely-defined object type**

  *A class that has been declared but not defined, an enumeration type
  in certain contexts (10.2), or an array of unknown bound or of
  incomplete element type, is an incompletely-defined object type.
  Incompletely-defined object types and cv void are incomplete types (6.9.1).
  Objects shall not be defined to have an incomplete type.*

  [footnote] *The size and layout of an instance
  of an incompletely-defined object type is unknown.*

An array of unknown bound is an incomplete type,
which in this clause, is admissible as an incomplete *element* type.

``S`` can never be used to declare an object.

**[types.basic] 6.9 Types, p6**

  *The declared type of an array object might be an array of
  unknown bound and therefore be incomplete at one point in a
  translation unit and complete later on; the array types at
  those two points (“array of unknown bound of T” and “array of N T”)
  are different types. The type of a pointer to array of unknown bound,
  or of a type defined by a typedef declaration to be an array of
  unknown bound, cannot be completed.*

The type of a pointer to ``S`` is an incomplete type,
and therefore can never be used to declare an object.

**[basic.fundamental] 6.9.1 Fundamental types, p9** 

  *A type cv void is an incomplete type that cannot be completed;
  such a type has an empty set of values.*

An incomplete multidimensional array type in which an extent
other than the first extent is ommitted cannot be completed.

**[basic.type.qualifier] 6.9.3 CV-qualifiers, p1**

  *Each type which is a cv-unqualified complete or
  incomplete object type or is void (6.9)* ...

CV-qualifiers apply to complete or incomplete types.

**[conf.array] 7.2 Array-to-pointer conversion**

  *An lvalue or rvalue of type “array of N T” or
  “array of unknown bound of T” can be converted to a prvalue of
  type “pointer to T”. The temporary materialization conversion (7.4)
  is applied. The result is a pointer to the first element of the array.*

``T`` cannot be an *incomplete type that cannot be completed*.

**[conv.rval] 7.4 Temporary materialization conversion [conv.rval]**

  *A prvalue of type T can be converted to an xvalue of type T.
  This conversion initializes a temporary object (15.2) of type T
  from the prvalue by evaluating the prvalue with the
  temporary object as its result object, and produces an xvalue
  denoting the temporary object. T shall be a complete type.*

The decay of ``int[][M][]`` is ``int(*)[M][]`` which is an
incomplete type that cannot be completed,
and objects cannot be declared of this type.
Therefore converting ``int[][M][]`` to a pointer is an error.

**[expr.call] 8.2.2 Function call, p4]**

  *When a function is called, the parameters that have object type
  shall have completely-defined object type.
  [Note: this still allows a parameter to be a pointer or reference
  to an incomplete class type. However, it prevents a passed-by-value
  parameter to have an incomplete class type. —end note]*

A parameter is not allowed to be a pointer or reference to an
incomplete array type.

**[expr.throw] 8.17 Throwing an exception, p2**

  *Evaluating a throw-expression with an operand throws an exception (18.1);
  the type of the exception object is determined by removing any top-level
  cv-qualifiers from the static type of the operand and adjusting the
  type from “array of T” or function type T to “pointer to T”.*

**[dcl.array] 11.3.4 Arrays, p2**

  *An array can be constructed from one of the
  fundamental types (except void), from a pointer,
  from a pointer to member, from a class,
  from an enumeration type, or from another array.*

"Another array" may be an array of unknown bound.

**[dlc.fct] 11.3.5 Functions, p5**

  *After determining the type of each parameter,
  any parameter of type “array of T” or of function type T
  is adjusted to be “pointer to T”.*

Constrain such that T is a complete type or an incomplete class type.


**[dcl.stc] Storage class specifiers, p7**

  *The name of a declared but undefined class can be used
  in an extern declaration. Such a declaration can
  only be used in ways that do not require a complete class type.*

Incomplete array types cannot be used as the return type of a function.


------------------------------------------------------------------------------
Type Deduction Non-Issue
------------------------------------------------------------------------------

.. code-block:: c++

  template <typename T>
  void f( span<T[3][5]> ); // A

  template <typename T>
  void f( span<T[1][3][5]> ); // B

  template <typename T>
  void f( span<T[1][][5]> ); // C

  template <typename T, std::size_t M, std::size_t N>
  void f( span<T[N][M][]> ) // D

  template <typename T, std::size_t M, std::size_t N>
  void f( span<T[][N][M]> ); // E

  template <typename T>
  void f( T[][3][5] ); // F
    // adjusted to pointer T(*)[3][5]

  template <typename T>
  void f( T[][][5] ); // G
    // adjusted to pointer T(*)[][5]
    // invalid due to T[][5] incomplete array type

  template <typename T, std::size_t M >
  void f( T[][M][] ) // H
    // adjusted to pointer T(*)[M][]
    // invalid due to T[][5] incomplete array type

  template <typename T, std::size_t M, std::size_t N>
  void f( T[][N][M] ); // I
    // adjusted to pointer T(*)[M][N]


  int foo( span<int[1][3][5]> x )
  {
    f(x); // no ambiquity
    // COULD match A with T == int[1]
    // DOES  match B with T == int ; more specialized
    // NOT match D because [3] != []
    // NOT match E because [5] != []
    // NOT match F because [1] != []
  }

  int foo( int y[][3][5] )
  {
    f(y);
    // DOES match F ; more specialized
    // COULD match I 
  }

..


