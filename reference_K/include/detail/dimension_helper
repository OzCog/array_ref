/*
//@HEADER
// ************************************************************************
// 
//                        Kokkos v. 2.0
//              Copyright (2014) Sandia Corporation
// 
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact  H. Carter Edwards (hcedwar@sandia.gov)
// 
// ************************************************************************
//@HEADER
*/

#ifndef STD_EXPERIMENTAL_ARRAY_PROPERTY_DETAIL_DIMENSION_HELPER_HEADER
#define STD_EXPERIMENTAL_ARRAY_PROPERTY_DETAIL_DIMENSION_HELPER_HEADER

#include <utility>
#include <type_traits>

//--------------------------------------------------------------------------

namespace std {
namespace experimental {
namespace array_property {

template< typename ValueType , ValueType ... Dim >
struct dimension_typed ;

struct all_type ;

}}} // std::experimental::array_property

//--------------------------------------------------------------------------

namespace std {
namespace experimental {
namespace array_property {
namespace detail {

//--------------------------------------------------------------------------

template< typename ... IntegralTypes >
struct pack_is_integral ;

template<>
struct pack_is_integral<> : std::true_type {};

template< typename T , typename ... IntegralTypes >
struct pack_is_integral<T,IntegralTypes...> :
  std::integral_constant< bool ,
    std::is_integral<T>::value &&
    pack_is_integral< IntegralTypes ... >::value >
  {};

//--------------------------------------------------------------------------

template< unsigned I , typename ValueType , size_t ... Dim >
struct dimension_extent ;

template< unsigned I , typename ValueType >
struct dimension_extent< I , ValueType >
{
  enum : unsigned  { rank_dynamic = 0 };
  enum : ValueType { value_static = static_cast<ValueType>(1) };
  enum : ValueType { value        = static_cast<ValueType>(1) };

  template< unsigned > using extent = dimension_extent ;

  constexpr dimension_extent() = default ;
  constexpr dimension_extent( dimension_extent && ) = default ;
  constexpr dimension_extent( dimension_extent const & ) = default ;
  dimension_extent & operator = ( dimension_extent const & ) = default ;

  template< typename ... Args >
  constexpr explicit
  dimension_extent( Args const & ... ) {}

  template< typename Arg >
  constexpr explicit
  dimension_extent( Arg const * const ) {}
};

template< unsigned I , typename ValueType , size_t Head , size_t ... Tail >
struct dimension_extent< I , ValueType , Head , Tail ... >
  : dimension_extent< I + 1 , ValueType , Tail ... >
{
  using next = dimension_extent< I + 1 , ValueType , Tail ... > ;

  enum : unsigned  { rank_dynamic = next::rank_dynamic };
  enum : ValueType { value_static = static_cast<ValueType>(Head) };
  enum : ValueType { value        = static_cast<ValueType>(Head) };

  template< unsigned J > using extent = typename
    std::conditional< J == I
                    , dimension_extent
                    , typename next::template extent<J>
                    >::type ;

  constexpr dimension_extent() = default ;
  constexpr dimension_extent( dimension_extent && ) = default ;
  constexpr dimension_extent( dimension_extent const & ) = default ;
  dimension_extent & operator = ( dimension_extent const & ) = default ;

  template< typename ... Args >
  constexpr explicit
  dimension_extent( size_t const & arg0 , Args const & ... args ) : next( arg0 , args... ) {}

  template< typename Arg >
  constexpr explicit
  dimension_extent( Arg const * const arg ) : next( arg ) {}

  template< size_t H , size_t ... T >
  explicit
  dimension_extent( dimension_extent<I,ValueType,H,T...> const & D )
    : next( D )
    { assert( value == D.value ); }
};

template< unsigned I , typename ValueType , size_t ... Tail >
struct dimension_extent< I , ValueType , 0 , Tail ... >
  : dimension_extent< I + 1 , ValueType , Tail ... >
{
  using next = dimension_extent< I + 1 , ValueType , Tail ... > ;

  enum : unsigned  { rank_dynamic = next::rank_dynamic + 1 };
  enum : ValueType { value_static = static_cast<ValueType>(0) };
  ValueType value ;

  template< unsigned J > using extent = typename
    std::conditional< J == I
                    , dimension_extent
                    , typename next::template extent<J>
                    >::type ;

  constexpr dimension_extent() noexcept : next() , value(0) {}
  constexpr dimension_extent( dimension_extent && ) = default ;
  constexpr dimension_extent( dimension_extent const & ) = default ;
  dimension_extent & operator = ( dimension_extent const & ) = default ;

  template< typename ... Args >
  constexpr explicit
  dimension_extent( size_t const & arg0 , Args const & ... args )
    : next(args...), value(arg0) {}

  template< typename Arg >
  constexpr explicit
  dimension_extent( Arg const * const arg ) : next( arg+1 ), value(*arg) {}

  template< size_t H , size_t ... T >
  constexpr explicit
  dimension_extent( dimension_extent<I,ValueType,H,T...> const & D )
    : next( D ), value( D.value ) {}
};


template< typename Dimension , size_t N >
struct dimension_prepend ;

template< typename ValueType , ValueType ... Dim , size_t N >
struct dimension_prepend< dimension_typed< ValueType , Dim... > , N >
{
  using type = dimension_typed< ValueType , N , Dim ... > ;
};

template< typename DataType , typename IntegralType >
struct dimension_extraction
{
  using type = dimension_typed< IntegralType > ;
};

template< typename DataType , size_t N , typename IntegralType >
struct dimension_extraction< DataType[N] , IntegralType >
{
  using nest = typename dimension_extraction< DataType , IntegralType >::type ;
  using type = typename dimension_prepend< nest , N >::type ;
};

template< typename DataType , typename IntegralType >
struct dimension_extraction< DataType[] , IntegralType >
{
  using nest = typename dimension_extraction< DataType , IntegralType >::type ;
  using type = typename dimension_prepend< nest , 0 >::type ;
};

//--------------------------------------------------------------------------

template < typename T >
struct is_integral_range : std::false_type
{
  enum : bool { is_all = false };

  static constexpr T const & begin( T const & val ) noexcept
    { return val ; }
  static constexpr T length( T const & ) noexcept
    { return 0 ; }
};

template < typename T >
struct is_integral_range< std::initializer_list<T> >
  : std::is_integral<T>
{
  enum : bool { is_all = false };

  static constexpr T begin( std::initializer_list<T> const & r ) noexcept
    { return r.begin()[0]; }
  static constexpr T length( std::initializer_list<T> const & r ) noexcept
    { return r.begin()[1] - r.begin()[0] ; }
};

template < typename T >
struct is_integral_range< std::pair<T,T> >
  : std::is_integral<T>
{
  enum : bool { is_all = false };

  static constexpr T begin( std::pair<T,T> const & r ) noexcept
    { return r.first ; }
  static constexpr T length( std::pair<T,T> const & r ) noexcept
    { return r.second - r.first ; }
};

template<>
struct is_integral_range< all_type > : std::true_type
{
  enum : bool { is_all = true };

  static constexpr size_t begin( all_type const & ) noexcept
    { return 0 ; }
  static constexpr size_t length( all_type const & ) noexcept
    { return 0 ; }
};

template< typename ... SliceSpecs >
struct rank_of_slices ;

template<>
struct rank_of_slices<> { enum : unsigned { value = 0 }; };

template< typename Spec , typename ... SliceSpecs >
struct rank_of_slices< Spec , SliceSpecs... >
{
  static_assert( std::is_integral<Spec>::value ||
                 is_integral_range<Spec>::value
               , "" );

  enum : unsigned { value = ( is_integral_range<Spec>::value ? 1 : 0 ) +
                            rank_of_slices< SliceSpecs... >::value };
};

template< unsigned R , typename D >
struct generate_dynamic_dimension ;

template< typename T , T ... Dims >
struct generate_dynamic_dimension< 0 , dimension_typed<T,Dims...> >
{ using type = dimension_typed<T,Dims...> ; };

template< unsigned R , typename T , T ... Dims >
struct generate_dynamic_dimension< R , dimension_typed<T,Dims...> >
{
  using type = typename
    generate_dynamic_dimension< R - 1 , dimension_typed<T,0,Dims...> >::type ;
};


template< typename Dimension , typename ... SliceSpecs >
struct generate_dimension
{
  // Simplest possible dimension

  enum : unsigned { rank = rank_of_slices< SliceSpecs... >::value };

  using type = typename
    generate_dynamic_dimension< rank , dimension_typed< typename Dimension::value_type > >::type ;

};

}}}} // std::experimental::array_property::detail

#endif // #ifndef STD_EXPERIMENTAL_ARRAY_PROPERTY_DETAIL_DIMENSION_HELPER_HEADER

