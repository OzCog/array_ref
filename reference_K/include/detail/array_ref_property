/*
//@HEADER
// ************************************************************************
// 
//                        Kokkos v. 2.0
//              Copyright (2014) Sandia Corporation
// 
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact  H. Carter Edwards (hcedwar@sandia.gov)
// 
// ************************************************************************
//@HEADER
*/

#ifndef STD_EXPERIMENTAL_DETAIL_ARRAY_REF_PROPERTY_HEADER
#define STD_EXPERIMENTAL_DETAIL_ARRAY_REF_PROPERTY_HEADER

namespace std {
namespace experimental {
namespace array_property {

struct layout_right ;
struct layout_left ;

}}} // std::experimental::array_property

namespace std {
namespace experimental {
namespace array_property {
namespace detail {

/**\brief Unpack array property pack */

template< typename DataType , typename ... Properties >
struct unpack_array_properties
{
  using next = unpack_array_properties< void , Properties... > ;

  enum : bool { data_type_is_array = 0 < std::rank< DataType >::value };
  enum : bool { properties_has_dimension =
    ! std::is_same< typename next::dimension , void >::value };

  // Only one dimension:

  static_assert( ! ( data_type_is_array && properties_has_dimension )
               , "array_ref can only have one dimension" );

  // types:

  using value_type = typename std::remove_all_extents< DataType >::type ;

  using dimension =
    typename std::conditional
      < data_type_is_array
      , typename dimension_extraction< DataType , size_t >::type
      , typename std::conditional
          < properties_has_dimension
          , typename next::dimension
          , dimension_typed<int>
          >::type
      >::type ;

  using layout =
    typename std::conditional
       < ! std::is_same< typename next::layout , void >::value
       , typename next::layout
       , layout_right
       >::type ;

  using bounds_check = typename next::bounds_check ;
};

template<>
struct unpack_array_properties< void >
{
  using dimension = void ;
  using layout    = void ;
  using bounds_check = void ;
};

template< typename ValueType , ValueType ... Dim , typename ... Properties >
struct unpack_array_properties
  < void , dimension_typed< ValueType , Dim... > , Properties... >
{
  using next = unpack_array_properties< void , Properties... > ;

  using dimension    = dimension_typed< ValueType , Dim... > ;
  using layout       = typename next::layout ;
  using bounds_check = typename next::bounds_check ;
};


template< typename Layout , typename ... Properties >
struct unpack_array_properties
  < typename std::enable_if
      <( std::is_same< Layout , layout_right >::value ||
         std::is_same< Layout , layout_left >::value )>::type
  , Layout , Properties... >
{
  using next = unpack_array_properties< void , Properties... > ;

  using dimension    = typename next::dimension ;
  using layout       = Layout ;
  using bounds_check = typename next::bounds_check ;
};

//----------------------------------------------------------------------------

template < typename ArrayRefType , typename ... SliceSpecs >
struct subarray_generator ;

template < typename ArrayRefType , typename ... SliceSpecs >
struct subarray_generator 
{
  // generate dimension

};

}}}} // std::experimental::array_property::detail

#endif // #ifndef STD_EXPERIMENTAL_DETAIL_ARRAY_REF_PROPERTY_HEADER

